{"version":3,"sources":["components/Input.js","components/Button.js","components/Container.js","components/Section.js","components/Balance.js","App.js","reportWebVitals.js","index.js"],"names":["Control","styled","div","Label","label","MyInput","input","ErrorMessage","Input","props","useField","field","meta","touched","error","Button","button","Container","Section","section","Balance","span","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","App","useState","balance","setBalance","initialValues","deposit","contribution","years","rate","onSubmit","val","total","i","Math","round","compoundInterest","Number","format","validationSchema","Yup","required","typeError","min","max","name","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAGMA,EAAUC,IAAOC,IAAV,sDAIPC,EAAQF,IAAOG,MAAV,4FAMLC,EAAUJ,IAAOK,MAAV,uKASPC,EAAeN,IAAOC,IAAV,6CAmBHM,EAfD,SAAC,GAAyB,IAAvBJ,EAAsB,EAAtBA,MAAUK,EAAY,2BACbC,YAASD,GADI,mBAC5BE,EAD4B,KACrBC,EADqB,KAGnC,OACI,eAACZ,EAAD,WACI,cAACG,EAAD,UAAQC,IACR,cAACC,EAAD,2BAAaM,GAAWF,IACvBG,EAAKC,SAAWD,EAAKE,MAChB,cAACP,EAAD,UAAeK,EAAKE,QACpB,SCvBHC,EAVAd,IAAOe,OAAV,yNCOGC,EAPGhB,IAAOC,IAAV,2HCQAgB,EARCjB,IAAOkB,QAAV,kMCOEC,EAPCnB,IAAOoB,KAAV,wHCgBPC,EAAY,IAAIC,KAAKC,aAAa,QAAS,CAC7CC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IA+CZC,EA5CH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACPC,EADO,KACEC,EADF,KAQd,OACI,cAAC,EAAD,UACI,eAAC,EAAD,WACI,cAAC,IAAD,CACIC,cAAe,CACXC,QAAS,GACTC,aAAc,GACdC,MAAO,GACPC,KAAM,IAEVC,SAfK,SAAC,GAA4C,IAA1CJ,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC5CE,EApBW,SAACL,EAASC,EAAcC,EAAOC,GAEpD,IADA,IAAIG,EAAQN,EACHO,EAAI,EAAGA,EAAIL,EAAOK,IACvBD,GAASA,EAAQL,IAAiBE,EAAO,GAG7C,OAAOK,KAAKC,MAAMH,GAcFI,CAAiBC,OAAOX,GAAUW,OAAOV,GAAeU,OAAOT,GAAQS,OAAOR,IAC1FL,EAAWV,EAAUwB,OAAOP,KAchBQ,iBAAkBC,IAAW,CACzBd,QAASc,MAAaC,SAAS,eAAeC,UAAU,yBACxDf,aAAca,MAAaC,SAAS,eAAeC,UAAU,yBAC7Dd,MAAOY,MAAaC,SAAS,eAAeC,UAAU,yBACtDb,KAAMW,MACDC,SAAS,eACTC,UAAU,yBACVC,IAAI,EAAG,2BACPC,IAAI,EAAG,6BAhBpB,SAmBI,eAAC,IAAD,WACI,cAAC,EAAD,CAAOC,KAAK,UAAUjD,MAAM,qBAC5B,cAAC,EAAD,CAAOiD,KAAK,eAAejD,MAAM,0BACjC,cAAC,EAAD,CAAOiD,KAAK,QAAQjD,MAAM,YAC1B,cAAC,EAAD,CAAOiD,KAAK,OAAOjD,MAAM,wBACzB,cAAC,EAAD,CAAQkD,KAAK,SAAb,2BAGK,KAAZvB,EAAiB,eAAC,EAAD,6BAAyBA,KAAqB,WCnDjEwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.884dee41.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport { useField } from 'formik'\r\n\r\nconst Control = styled.div`\r\n    margin-bottom: 20px;\r\n`\r\n\r\nconst Label = styled.label`\r\n    color: #000;\r\n    display: block;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nconst MyInput = styled.input`\r\n    outline: none;\r\n    padding: 8px;\r\n    border: solid 1px #b1b3b5;\r\n    border-radius: 4px;\r\n    width: 100%;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n`\r\n\r\nconst Input = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props)\r\n\r\n    return (\r\n        <Control>\r\n            <Label>{label}</Label>\r\n            <MyInput {...field} {...props} />\r\n            {meta.touched && meta.error\r\n                ? <ErrorMessage>{meta.error}</ErrorMessage>\r\n                : null\r\n            }\r\n        </Control>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import styled from 'styled-components'\r\n\r\nconst Button = styled.button`\r\n    background-color: palevioletred;\r\n    color: white;\r\n    font-size: 1em;\r\n    padding: 0.25em 1em;\r\n    border: 2px solid palevioletred;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport default Button\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100%;\r\n    align-items: center;\r\n`\r\n\r\nexport default Container","import styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n    background-color: #eee;\r\n    border-top: solid 2px palevioletred;\r\n    padding: 20px 25px;\r\n    width: 500px;\r\n    box-shadow: 0px 2px 3px rgba( 0, 0, 0, 0.3 );\r\n`\r\n\r\nexport default Section\r\n","import styled from 'styled-components'\r\n\r\nconst Balance = styled.span`\r\n    font-size: 36px;\r\n    margin-top: 12px;\r\n    display: inline-block;\r\n    color: black;\r\n`\r\n\r\nexport default Balance\r\n","import { useState } from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Input from './components/Input'\r\nimport Button from './components/Button'\r\nimport Container from './components/Container'\r\nimport Section from './components/Section'\r\nimport Balance from './components/Balance'\r\n\r\nconst compoundInterest = (deposit, contribution, years, rate) => {\r\n    let total = deposit\r\n    for (let i = 0; i < years; i++) {\r\n        total = (total + contribution) * (rate + 1)\r\n    }\r\n\r\n    return Math.round(total)\r\n}\r\n\r\nconst formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n})\r\n\r\nconst App = () => {\r\n    const [balance, setBalance] = useState('')\r\n\r\n    const handleSubmit = ({ deposit, contribution, years, rate }) => {\r\n        const val = compoundInterest(Number(deposit), Number(contribution), Number(years), Number(rate))\r\n        setBalance(formatter.format(val))\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Section>\r\n                <Formik\r\n                    initialValues={{\r\n                        deposit: '',\r\n                        contribution: '',\r\n                        years: '',\r\n                        rate: '',\r\n                    }}\r\n                    onSubmit={handleSubmit}\r\n                    validationSchema={Yup.object({\r\n                        deposit: Yup.number().required('Obligatorio').typeError('Debe ser un número'),\r\n                        contribution: Yup.number().required('Obligatorio').typeError('Debe ser un número'),\r\n                        years: Yup.number().required('Obligatorio').typeError('Debe ser un número'),\r\n                        rate: Yup.number()\r\n                            .required('Obligatorio')\r\n                            .typeError('Debe ser un número')\r\n                            .min(0, 'El valor mínimo es 0')\r\n                            .max(1, 'El valor máximo es 1'),\r\n                    })}\r\n                >\r\n                    <Form>\r\n                        <Input name=\"deposit\" label=\"Deposito inicial\" />\r\n                        <Input name=\"contribution\" label=\"Contribución anual\" />\r\n                        <Input name=\"years\" label=\"Años\" />\r\n                        <Input name=\"rate\" label=\"Interés estimado\" />\r\n                        <Button type=\"submit\" >Calcular</Button>\r\n                    </Form>\r\n                </Formik>\r\n                {balance !== '' ? <Balance>Balance final: {balance}</Balance> : null}\r\n            </Section>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}